{"name":"jQuery assert","tagline":"assertions for jQuery","body":"jquery-assert\r\n=============\r\n\r\njQuery assert, let's you add assertions to your jQuery code, to make sure your selectors find elements or match an expected number of elements. Here are some examples:\r\n\r\nMake sure, one or more elements were found, before calling the next function: \r\n```javascript\r\n$('#element01').assertFound().val('x')\r\n```\r\n\r\nAssert that 1 element was selected:\r\n```javascript\r\n$('#element01').assertOne(); // same as assertFound(1)\r\n```\r\n\r\nMake sure a given number of elements were found before calling further functions:\r\n```javascript\r\n$('.item').assertFound(10).find('p').assertFound(10).data(...)\r\n```\r\n\r\nFor more examples take a look at the [unit tests](https://github.com/timbuethe/jquery-assert/blob/master/tests.js)\r\n\r\nTo use jQuery assert, include after jQuery and you good to go:\r\n```html\r\n<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n<script src=\"jquery.assert.js\"></script>\r\n```\r\n\r\nIf an assertion isn't fullfilled, an exception gets thrown. So, if your code breaks, due to changes in the HTML for example, you will at least notice it. \r\nWhen used consequently jQuery assert will solidify and tighten your code. \r\n\r\n\r\nOptions\r\n-------------\r\n\r\nYou can set options like this:\r\n```javascript\r\n$.assert({option: 'value'})\r\n```\r\n\r\n * __enabled__ (boolean, default: true) can be used to enable and disable assertions. This might be useful to disable assertions in production.\r\n * __extend-jquery__ (boolean, default: false) If enabled, jQuery-assert will extend (monkey patch) the original jQuery function, see blow.\r\n * __debug__ (boolean, default: false) If enabled, jQuery assert will log debug messages to ```console.log```\r\n\r\n\r\nExtended jQuery functions\r\n-------------\r\n\r\njQuery assert does not only add its own functions (like assertFound) but patches jQuery's built in functions as well. This functionality is disabled by default\r\nand users must opt-in to use it by setting 'extend-jquery' to true. Afterwards applicable functions take an extra parameter, the number of expected elements,\r\nexecute the original function and assert the number of elements. Here are some examples:\r\n\r\n```html\r\n <script src=\"http://code.jquery.com/jquery-1.9.1.min.js\"></script>\r\n <script src=\"jquery.assert.js\"></script>\r\n <script>\r\n\r\n    // enable assertions as well as jQuery extension\r\n    $.assert({enabled: true, 'extend-jquery': true})\r\n\r\n    // select an element by id and make sure it was found.\r\n    // then use extended find and expect to find three elements\r\n    $('#element04', 1).find('p', 3)\r\n </script>\r\n```\r\n\r\nThe following jQuery function are monkey patched (if activated) and take an additional parameter, the number of expected elements.\r\n\r\n * jQuery\r\n * add\r\n * addBack\r\n * andSelf\r\n * children\r\n * closest\r\n * end\r\n * eq\r\n * filter\r\n * find\r\n * has\r\n * map\r\n * next\r\n * nextAll\r\n * nextUntil\r\n * not\r\n * parent\r\n * parents\r\n * parentsUntil\r\n * prev\r\n * prevAll\r\n * prevUntil\r\n * siblings\r\n * slice\r\n\r\nFor more examples take a look at the [unit tests](https://github.com/timbuethe/jquery-assert/blob/master/tests.js)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}